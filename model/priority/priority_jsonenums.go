// generated by jsonenums -type=Priority; DO NOT EDIT

package priority

import (
	"encoding/json"
	"fmt"
)

var (
	_PriorityNameToValue = map[string]Priority{
		"None": None,
		"A":    A,
		"B":    B,
		"C":    C,
		"D":    D,
		"E":    E,
		"F":    F,
		"G":    G,
		"H":    H,
		"I":    I,
		"J":    J,
		"K":    K,
		"L":    L,
		"M":    M,
		"N":    N,
		"O":    O,
		"P":    P,
		"Q":    Q,
		"R":    R,
		"S":    S,
		"T":    T,
		"U":    U,
		"V":    V,
		"W":    W,
		"X":    X,
		"Y":    Y,
		"Z":    Z,
	}

	_PriorityValueToName = map[Priority]string{
		None: "None",
		A:    "A",
		B:    "B",
		C:    "C",
		D:    "D",
		E:    "E",
		F:    "F",
		G:    "G",
		H:    "H",
		I:    "I",
		J:    "J",
		K:    "K",
		L:    "L",
		M:    "M",
		N:    "N",
		O:    "O",
		P:    "P",
		Q:    "Q",
		R:    "R",
		S:    "S",
		T:    "T",
		U:    "U",
		V:    "V",
		W:    "W",
		X:    "X",
		Y:    "Y",
		Z:    "Z",
	}
)

func init() {
	var v Priority
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PriorityNameToValue = map[string]Priority{
			interface{}(None).(fmt.Stringer).String(): None,
			interface{}(A).(fmt.Stringer).String():    A,
			interface{}(B).(fmt.Stringer).String():    B,
			interface{}(C).(fmt.Stringer).String():    C,
			interface{}(D).(fmt.Stringer).String():    D,
			interface{}(E).(fmt.Stringer).String():    E,
			interface{}(F).(fmt.Stringer).String():    F,
			interface{}(G).(fmt.Stringer).String():    G,
			interface{}(H).(fmt.Stringer).String():    H,
			interface{}(I).(fmt.Stringer).String():    I,
			interface{}(J).(fmt.Stringer).String():    J,
			interface{}(K).(fmt.Stringer).String():    K,
			interface{}(L).(fmt.Stringer).String():    L,
			interface{}(M).(fmt.Stringer).String():    M,
			interface{}(N).(fmt.Stringer).String():    N,
			interface{}(O).(fmt.Stringer).String():    O,
			interface{}(P).(fmt.Stringer).String():    P,
			interface{}(Q).(fmt.Stringer).String():    Q,
			interface{}(R).(fmt.Stringer).String():    R,
			interface{}(S).(fmt.Stringer).String():    S,
			interface{}(T).(fmt.Stringer).String():    T,
			interface{}(U).(fmt.Stringer).String():    U,
			interface{}(V).(fmt.Stringer).String():    V,
			interface{}(W).(fmt.Stringer).String():    W,
			interface{}(X).(fmt.Stringer).String():    X,
			interface{}(Y).(fmt.Stringer).String():    Y,
			interface{}(Z).(fmt.Stringer).String():    Z,
		}
	}
}

// MarshalJSON is generated so Priority satisfies json.Marshaler.
func (r Priority) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PriorityValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Priority: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Priority satisfies json.Unmarshaler.
func (r *Priority) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Priority should be a string, got %s", data)
	}
	v, ok := _PriorityNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Priority %q", s)
	}
	*r = v
	return nil
}
